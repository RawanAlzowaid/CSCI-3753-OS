

1. (+12) Describe at
least 3 general approaches in memory management towards solving the external
fragmentation problem.
(+4 for each points)  


Ans:-

Three general
approaches in memory management towards solving the external fragmentation
problem can be:

1.Compacting: eliminates
all fragments in memory by moving all used memory so that it is in a contiguous
chunk. By moving all used memory to be one large chunk, there is now a large
chunk of free memory that can be used by entire process address spaces and many
more processes can now be fit in to memory.
However, this process is very expensive and complicated, and can only be done
if addresses are bound at run-time.

2. Segmentation: breaks main memory into variable size chunks. This
allows for the code, data, heap, and stack sections to all be centralized to
their own section.

3. Paging: This is the most efficient one to solve the external
fragmentation problem. When one implements paging, they divide a process into pages,
and fit individual pages into memory. This solves the external fragmentation
problem because memory is divided up into equal size memory slots and pages are
fit into these slots. Since a free memory slot is the size of a page, there is
no wasted memory. Once a process is divided into pages and fit into memory,
there is a page table kept for that process to keep track of where each page is
in memory. The page table is usually stored in RAM, making for much 
faster and less complicated accesses.

4. Worst-fit policy is also a reasonable answer, because it delays
fragmentation for the longest time.  





2. (+12) A memory
manager for a variable-sized region strategy has a free list of blocks of size
600, 400, 1000, 2200, 1600, and 1050 bytes. What block will be selected to
honor a request for:
a. 1603 bytes using a best-fit policy?
b. 949 bytes using a best-fit policy?
c. 1603 bytes using a worst-fit policy?
d. 349 bytes using a worst-fit policy?
e. 1603 bytes using a first-fit policy? 
(assume the free list is ordered as listed above)
f. 1049 using a first-fit policy?

Ans:
a. 1603 bytes using a best-fit policy:2200 
(2200 is the smallest block of unallocated memory in which 1603 will fit)

b. 949 bytes using a best-fit policy:1000 
(1000 is the smallest block of unallocated memory in which 949 will fit)

c. 1603 bytes using a worst-fit policy:2200
(2200 is the largest block)

d. 349 bytes using a worst-fit policy:2200 (2200 is the largest block)

e. 1603 bytes using a first-fit policy?:2200
(2200 is the first block encountered to hold 1603 completely)

f. 1049 using a first-fit policy : 2200 
(2200 is the first block encountered to hold 1603 completely)





3. (+20) Suppose two
processes need to be mapped into main memory using pages. Process P1 consists
of 7 pages, and process P2 consists of 4 pages. Assume main memory consists of
16 frames, a logical page is the same size as a physical frame, and that 4
entries in a page table fills up a frame of memory. Assume also that within the
process' allocated address spaces, there are two pages of shared code 'X' and
'Y' common to both address spaces. Design a memory management system that can
store these two processes and their page tables in RAM. Identify which frames
you have chosen to assign to which process pages and page tables in main
memory/RAM. Also show possible page tables for P1 and P2.
(e.g. page table for P1 should have 7 entries).

 

Ans:

P1 page table contains
7 entries, hence 2 page table for P1.
P2 page table contains 4 entries, hence 1 page table for P2.
Following can be one possible memory lay out:

RAM:
---------------
0 | P1 page 0
1 | P1 page 1
2 | P1 page 2
3 | P1 page 3
4 | P1 page 4
5 | P2 page 0
6 | P2 page 1
7 | X - P1 page 5 and P2 page 2
8 | Y - P1 page 6 and P2 page 3
9 | -
10 | -
11 | -
12 | -
13 | P1 Page Table 1
14 | P1 Page Table 2
15 | P2 Page Table 1

P1| Page Table 1
---------------
0 | 0 
1 | 1
2 | 2
3 | 3

P1| Page Table 2
---------------
4 | 4
X | 7
Y | 8
- | -

P2|Page Table 1
---------------
0 | 5
1 | 6
X | 7
Y | 8
*Note: The location of page table 1 and 2 will be stored in the base register.





4. (+12) Suppose
on-demand paging is employed in addition to TLB caching. The time for a TLB hit
is T = 1 ns, a memory read M = 10 ns, and a disk read D = 10 ms. Let p_TLB =
the probability of a TLB hit, and p = the probability of a page fault given a
TLB miss. What is a general formula for the average memory access time
expressed as a function of T, M, D, p, and p_TLB? Once parameter
values are substituted, and assuming assuming p = .001 and p_TLB = 90%, what is
the calculated average memory access time?

Ans:

(-3 pts) Average
memory access time 
= (T * p_TLB) + (1 - p_TLB)(D * p) + (1 - p_TLB)(M * (1 - p))
= (1 ns * .9) + .1(10,000,000 ns * .001) + .1(10 ns * .999)
=  1001.89 ns


(Full Credit) More accurately:
For each operation, page table access time should be added with each operation.
[((T+M)*p_TLB)+(1-p_TLB)[(D+M)*p+(2M *(1-p))]

=1010.99 ns





5. (+12) The Least
Recently Used (LRU) page replacement policy does not suffer from Belady's
Anomaly. Explain intuitively why this is the case. Construct an example page
fault sequence to illustrate your point.

Ans:

The Least Recently
Used replacement policy chooses to replace the page which has not been
referenced for the longest time. This policy assumes the recent past will
approximate the immediate future. If the window size increases, the probability
of recently used data in the stack becomes more. Hence it does not suffer from
Belady's anamoly.

Following Example
show an example of it.



LRU:
 ->check repo pic PS4Q5A
 
 
 

6. (+20) Given a frame
allocation of 3, and the following sequence of page references 3 2 4 3 4 2 2 3
4 5 6 7 7 6 5 4 5 6 7 2 1, and assuming main memory is initially unloaded, show
the page faulting behavior using the following page replacement policies. How
many page faults are generated by each page replacement algorithm? Which
generates the fewest page faults?


a. FIFO
b. OPT
c. LRU

Ans:-
-> check repo pic PS4Q6FIFIO
-> check repo pic PS4Q6OPT
-> check repo pic PS4Q6LRU



OPT generates the fewest page faults always, as it should since it is optimum. Here LRU generates the same amount of page fault.  






7. (+12) Assume the
same sequence of page references as in problem #6, and assume memory is
initially unloaded, but now assume that a dynamic paging working-set algorithm
is applied to the same sequence of page references, with a window size of 6.
Draw the page faulting behavior. Your solution chart should show the frame
allocation at any given time to the process.
[Hint: see also the text's explanation of the working set algorithm on pp.
485-6].

--> check repo pic PS4Q7A



  



  
  
